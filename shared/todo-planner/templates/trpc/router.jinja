// {{ file.path }} - tRPC Router
// Generated from PRD requirements
{% if file.options.auth %}
// ADVICE: Implement authentication middleware for protected procedures
{% endif %}
{% if file.options.validation %}
// ADVICE: Use Zod schemas for input/output validation
{% endif %}

import { z } from 'zod';
import { createTRPCRouter, {% if file.options.auth %}protectedProcedure{% else %}publicProcedure{% endif %} } from '../trpc';

{% if file.options.validation %}
// Input validation schemas
const createInputSchema = z.object({
  name: z.string().min(1),
  description: z.string().optional(),
});

const updateInputSchema = z.object({
  id: z.string(),
  name: z.string().min(1).optional(),
  description: z.string().optional(),
});
{% endif %}

export const {{ file.module or 'example' }}Router = createTRPCRouter({
  {% for function in functions %}
  // TODO: {{ function.prd_references | join(', ') }} - {{ function.description }}
  {{ function.name }}: {% if file.options.auth %}protectedProcedure{% else %}publicProcedure{% endif %}
    {% if function.name.lower() in ['create', 'update'] and file.options.validation %}
    .input({{ function.name.lower() }}InputSchema)
    {% elif function.name.lower() == 'getbyid' and file.options.validation %}
    .input(z.object({ id: z.string() }))
    {% elif file.options.validation %}
    .input(z.object({}))
    {% endif %}
    .{% if function.name.lower() in ['create', 'update', 'delete'] %}mutation{% else %}query{% endif %}(async ({ input{% if file.options.auth %}, ctx{% endif %} }) => {
      {% if file.options.auth %}
      // Access authenticated user via ctx.session
      const userId = ctx.session.user.id;
      {% endif %}

      {% if function.name.lower() == 'create' %}
      // Create new record
      const result = await createRecord({
        ...input,
        {% if file.options.auth %}userId{% endif %}
      });
      return result;

      {% elif function.name.lower() == 'update' %}
      // Update existing record
      const result = await updateRecord(input.id, {
        ...input,
        {% if file.options.auth %}userId{% endif %}
      });
      return result;

      {% elif function.name.lower() == 'delete' %}
      // Delete record
      const result = await deleteRecord(input.id{% if file.options.auth %}, userId{% endif %});
      return result;

      {% elif function.name.lower() in ['get', 'getall', 'list'] %}
      // Query records
      const results = await getRecords({% if file.options.auth %}userId{% endif %});
      return results;

      {% elif function.name.lower() == 'getbyid' %}
      // Get single record by ID
      const result = await getRecordById(input.id{% if file.options.auth %}, userId{% endif %});
      if (!result) {
        throw new Error('Record not found');
      }
      return result;

      {% else %}
      // Custom procedure logic
      const result = await processRequest(input{% if file.options.auth %}, userId{% endif %});
      return result;
      {% endif %}
    }),

  {% endfor %}
});

// Helper functions
async function createRecord(data: any): Promise<any> {
  // TODO: Implement record creation logic
  throw new Error("Create logic not implemented");
}

async function updateRecord(id: string, data: any): Promise<any> {
  // TODO: Implement record update logic
  throw new Error("Update logic not implemented");
}

async function deleteRecord(id: string, userId?: string): Promise<any> {
  // TODO: Implement record deletion logic
  throw new Error("Delete logic not implemented");
}

async function getRecords(userId?: string): Promise<any[]> {
  // TODO: Implement records query logic
  return [];
}

async function getRecordById(id: string, userId?: string): Promise<any | null> {
  // TODO: Implement single record query logic
  return null;
}

async function processRequest(input: any, userId?: string): Promise<any> {
  // TODO: Implement custom request processing
  return { success: true };
}
