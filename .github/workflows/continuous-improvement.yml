name: Continuous Improvement - Code Duplication Detection

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  duplicate-detection:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for comprehensive analysis

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install CI dependencies
        run: |
          python -m pip install --upgrade pip
          pip install chromadb transformers torch sentence-transformers numpy scipy
          pip install multilspy

      - name: Setup language server dependencies
        run: |
          # Install Go and gopls for Go language support
          echo "Installing Go language server dependencies..."
          if ! command -v go &> /dev/null; then
            # Download and install Go
            wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            echo "/usr/local/go/bin" >> $GITHUB_PATH
            export PATH=$PATH:/usr/local/go/bin
          fi

          # Install gopls
          go install golang.org/x/tools/gopls@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

          # Install .NET for C# language support
          echo "Installing .NET for C# language server..."
          wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-6.0

          # Verify installations
          echo "Verifying language server installations..."
          go version || echo "Go installation failed"
          gopls version || echo "gopls installation failed"
          dotnet --version || echo ".NET installation failed"

      - name: Verify multilspy installation
        run: |
          python -c "import multilspy; print('multilspy library installed successfully')"

      - name: Get changed files
        id: changed-files
        run: |
          set -e
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Use GitHub API for more reliable diff when available
            if command -v gh >/dev/null 2>&1; then
              gh api repos/${{ github.repository }}/compare/${{ github.event.pull_request.base.sha }}...${{ github.sha }} \
                --jq '.files[].filename' > changed_files.txt 2>/dev/null || {
                echo "GitHub API failed, falling back to git diff"
                git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} > changed_files.txt
              }
            else
              git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} > changed_files.txt
            fi
          else
            git diff --name-only HEAD~1 HEAD > changed_files.txt || {
              echo "Git diff failed, analyzing all files"
              echo "" > changed_files.txt
            }
          fi

          echo "files=$(cat changed_files.txt | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo "Changed files:"
          cat changed_files.txt || echo "No changed files detected"

      - name: Ensure CI registry directory exists
        run: |
          mkdir -p .ci-registry/reports
          mkdir -p .ci-registry/cache
          mkdir -p .ci-registry/backups

      - name: Check initial indexing status
        id: indexing-check
        run: |
          if [ -f ".ci-registry/ci_config.json" ]; then
            cd shared && PYTHONPATH=.. python ci/core/chromadb_storage.py \
              --project-root .. \
              --check-indexing \
              --output json > ../indexing_status.json

            initial_completed=$(python3 -c "
            import json
            try:
                with open('indexing_status.json', 'r') as f:
                    data = json.load(f)
                print(str(data.get('initial_index_completed', False)).lower())
            except:
                print('false')
            ")

            echo "initial_completed=$initial_completed" >> $GITHUB_OUTPUT
            echo "Initial indexing completed: $initial_completed"

            if [ "$initial_completed" = "true" ]; then
              echo "Initial indexing already completed - proceeding with incremental analysis"
            else
              echo "Initial indexing required - will run full scan first"
            fi
          else
            echo "initial_completed=false" >> $GITHUB_OUTPUT
            echo "No CI config found - assuming fresh setup"
          fi

      - name: Run initial full scan
        if: steps.indexing-check.outputs.initial_completed == 'false'
        run: |
          echo "Running initial full codebase scan..."
          cd shared && PYTHONPATH=.. python ci/core/chromadb_storage.py \
            --project-root .. \
            --full-scan

          echo "Initial scan completed - ChromaDB now contains full codebase index"

      - name: Run duplicate detection
        run: |
          cd shared && PYTHONPATH=.. python ci/integration/orchestration_bridge.py \
            --project-root .. \
            --changed-files ${{ steps.changed-files.outputs.files }}

      - name: Check for analysis results
        id: check-results
        if: always()
        run: |
          if [ -f ".ci-registry/reports/latest-analysis.json" ]; then
            echo "reports_exist=true" >> $GITHUB_OUTPUT
            echo "Analysis results found"
            echo "Report size: $(wc -c < .ci-registry/reports/latest-analysis.json) bytes"
          else
            echo "reports_exist=false" >> $GITHUB_OUTPUT
            echo "No analysis results found"
          fi

          # Check if reports directory exists and list contents
          if [ -d ".ci-registry/reports" ]; then
            echo "Reports directory contents:"
            ls -la .ci-registry/reports/
          else
            echo "Reports directory does not exist"
          fi

      - name: Upload analysis results
        if: always() && steps.check-results.outputs.reports_exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: duplication-analysis
          path: |
            .ci-registry/reports/
            .ci-registry/baseline-duplicates.json
          retention-days: 30
          if-no-files-found: warn

      - name: Collect diagnostic information
        if: failure()
        run: |
          echo "=== Diagnostic Information ==="
          echo "Python Version: $(python --version)"
          echo "Current Directory: $(pwd)"
          echo "Available Python packages:"
          pip list | grep -E "(faiss|transformers|torch|multilspy)"

          # Check for log files
          if [ -d ".ci-registry/logs" ]; then
            echo "CI Registry logs:"
            ls -la .ci-registry/logs/
          fi

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.ci-registry/reports/latest-analysis.json';

            if (fs.existsSync(path)) {
              const analysis = JSON.parse(fs.readFileSync(path, 'utf8'));
              const duplicateCount = analysis.findings?.length || 0;
              const summary = analysis.summary || {};

              const status = duplicateCount > 0 ?
                'Code duplications detected. Review analysis artifacts for details.' :
                'No significant code duplication detected.';

              const comment = '## Code Duplication Analysis Results\\n\\n' +
                'Project: ai-assisted-workflows\\n' +
                'Analysis Date: ' + (analysis.analysis_date || 'Unknown') + '\\n' +
                'Duplicates Found: ' + duplicateCount + '\\n' +
                'Similarity Threshold: ' + (analysis.config?.similarity_threshold || '0.85') + '\\n\\n' +
                '### Summary\\n' +
                '- Automatic Fixes: ' + (summary.automatic_fixes || 0) + '\\n' +
                '- GitHub Issues: ' + (summary.github_issues || 0) + '\\n' +
                '- Skipped: ' + (summary.skipped || 0) + '\\n' +
                '- Errors: ' + (summary.errors || 0) + '\\n\\n' +
                'Status: ' + status + '\\n\\n' +
                'Analysis completed by Continuous Improvement Framework.';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Check analysis results
        run: |
          if [ -f ".ci-registry/reports/latest-analysis.json" ]; then
            echo "Analysis completed successfully"
            cat .ci-registry/reports/latest-analysis.json
          else
            echo "No analysis results found"
          fi

      - name: Validate workflow completion
        if: always()
        run: |
          echo "=== Workflow Validation ==="
          echo "Working Directory: $(pwd)"
          echo "Workflow Status: ${{ job.status }}"
          echo "Python Version: $(python --version)"

          echo ""
          echo "CI Registry Structure:"
          if [ -d ".ci-registry" ]; then
            find .ci-registry -type f -ls 2>/dev/null || ls -la .ci-registry/ 2>/dev/null || echo "Cannot list CI registry contents"
          else
            echo "CI registry directory not found"
          fi

          echo ""
          echo "Reports Directory:"
          if [ -d ".ci-registry/reports" ]; then
            ls -la .ci-registry/reports/
            echo "Report file count: $(find .ci-registry/reports -name '*.json' | wc -l)"
          else
            echo "Reports directory not found"
          fi

          echo ""
          echo "Workflow completed with status: ${{ job.status }}"
