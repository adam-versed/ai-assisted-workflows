// {{ file.path }} - Convex Functions
// Generated from PRD requirements
{% if file.options.validation %}
// ADVICE: Implement schema validation for all function arguments
{% endif %}
{% if file.options.auth %}
// ADVICE: Add authentication checks to protect sensitive operations
{% endif %}

import { mutation, query } from "convex/server";

{% for function in functions %}
{% if function.name in ['mutation', 'query'] or 'mutation' in function.name.lower() %}
export const {{ function.name.replace('mutation', '').replace('query', '') or 'operation' }} = {{ 'mutation' if 'mutation' in function.name.lower() else 'query' }}(async (ctx, args) => {
  // TODO: {{ function.prd_references | join(', ') }} - {{ function.description }}

  {% if file.options.validation %}
  // Validate input arguments
  // Add schema validation logic here
  {% endif %}

  {% if file.options.auth %}
  // Check authentication
  // const user = await ctx.auth.getUserIdentity();
  // if (!user) throw new Error("Unauthorized");
  {% endif %}

  {% if 'mutation' in function.name.lower() %}
  // ADVICE: Keep mutations deterministic and fast; no external side-effects
  // Perform database mutation
  const result = await ctx.db.insert("table", args);
  return result;
  {% else %}
  // ADVICE: Use indexes and narrow fields; avoid heavy joins
  // Query database efficiently
  const results = await ctx.db.query("table").collect();
  return results;
  {% endif %}
});

{% else %}
{{ function.stub_code }}

{% endif %}
{% endfor %}
