{{ header }}
# File: {{ file.path }}
# Kind: {{ file.kind }}
# Stack: python-fastapi

from typing import Any

{% for fn in file.functions %}

def {{ fn.name }}({% for p in fn.signature.params %}{{ p.name }}: {{ p.type }}{% if not loop.last %}, {% endif %}{% endfor %}) -> {{ fn.signature.returns or 'None' }}:
    """
    Function: {{ fn.name }} (id: {{ fn.id }})
    Requirements: {{ fn.requirements | join(', ') }}
    Description: {{ fn.description }}
    Calls: {{ fn.calls | join(' -> ') }}
    """
    # BEGIN-IMPL (keep)
    {% if stub_level == 0 %}
    # TODO: implement (see PRD)
    {% elif stub_level == 1 %}
    # TODO: Steps
    # 1) Validate input [PRD]
    # 2) Persist via repo.user.insert
    # 3) Enqueue welcome
    # 4) Return sanitized user
    {% else %}
    # PSEUDOCODE
    # validate(input)
    # user = repo.user.insert(input)
    # notifications.enqueue_welcome(user)
    # return user
    {% endif %}
    # END-IMPL

{% endfor %}
