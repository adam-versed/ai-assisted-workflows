name: Comprehensive Code Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Weekly continuous improvement cycle (Mondays at 2 AM UTC)
    - cron: "0 2 * * 1"
  repository_dispatch:
    # Support for CTO orchestrator and improvement cycle triggers
    types:
      [
        continuous-improvement-cycle,
        quality-degradation-detected,
        cto-escalation-required,
      ]

jobs:
  analysis:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        include:
          - os: windows-latest
            python-version: "3.10"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Full git history for analysis

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r shared/lib/scripts/setup/requirements.txt

      - name: Security Analysis
        run: python shared/lib/scripts/analyze/security/vulnerability_scan.py

      - name: Code Quality Check
        run: python shared/lib/scripts/analyze/code_quality/complexity_metrics.py

      - name: Performance Profiling
        run: python shared/lib/scripts/analyze/performance/profile_code.py

      - name: Architecture Analysis
        run: python shared/lib/scripts/analyze/architecture/dependency_analysis.py

      - name: Generate Analysis Report
        run: python shared/lib/scripts/plan/generate_analysis_report.py

      - name: Upload Analysis Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            analysis_report.json
            performance_profile.log
            security_scan_results.txt
            code_complexity_metrics.csv

  # Phase 3: Continuous Improvement Integration
  continuous-improvement:
    needs: analysis
    runs-on: ubuntu-latest
    if: ${{ always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}

    permissions:
      contents: read
      actions: read
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r shared/lib/scripts/setup/requirements.txt
          pip install requests  # For GitHub API calls

      - name: Download Analysis Artifacts
        uses: actions/download-artifact@v3
        with:
          pattern: code-analysis-*
          merge-multiple: true

      - name: Restore Workflow Registry Cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: .github/workflow-registry.json
          key: claude-workflows-v1-${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_date }}
          restore-keys: |
            claude-workflows-v1-${{ github.repository_owner }}-${{ github.event.repository.name }}-
            claude-workflows-v1-${{ github.repository_owner }}-

      - name: Run GitHub Workflow Monitor
        id: monitor
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting continuous improvement monitoring cycle..."
          python shared/lib/scripts/continuous-improvement/workflows/github_monitor.py --output-format json > monitoring_result.json

          # Extract key metrics for outputs
          QUALITY_SCORE=$(python -c "
          import json
          with open('monitoring_result.json', 'r') as f:
              data = json.load(f)
              print(data.get('metadata', {}).get('quality_score', 0))
          ")

          ESCALATION_NEEDED=$(python -c "
          import json
          with open('monitoring_result.json', 'r') as f:
              data = json.load(f)
              print('true' if data.get('metadata', {}).get('cto_escalation', False) else 'false')
          ")

          echo "quality_score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
          echo "escalation_needed=$ESCALATION_NEEDED" >> $GITHUB_OUTPUT

          # Display monitoring summary
          echo "## Continuous Improvement Monitoring Results" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Score: $QUALITY_SCORE" >> $GITHUB_STEP_SUMMARY
          echo "- CTO Escalation Required: $ESCALATION_NEEDED" >> $GITHUB_STEP_SUMMARY

      - name: Save Workflow Registry Cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: .github/workflow-registry.json
          key: claude-workflows-v1-${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_date }}-${{ github.run_id }}

      - name: Upload Monitoring Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: continuous-improvement-monitoring
          path: |
            monitoring_result.json
            .github/workflow-registry.json
          retention-days: 30

      - name: Create Issue for Critical Quality Degradation
        if: steps.monitor.outputs.escalation_needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const qualityScore = '${{ steps.monitor.outputs.quality_score }}';
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            const issueTitle = `ðŸš¨ Critical Code Quality Issue Detected - Score: ${qualityScore}`;
            const issueBody = `
            ## Critical Quality Degradation Detected

            **Quality Score:** ${qualityScore}
            **Workflow Run:** [${runUrl}](${runUrl})
            **Timestamp:** ${{ github.event.head_commit.timestamp || github.run_started_at }}

            ### Details
            The continuous improvement monitoring system has detected critical code quality issues that require immediate attention.

            ### Recommended Actions
            1. Review the detailed analysis artifacts from this workflow run
            2. Check recent commits for potential quality regressions
            3. Run targeted analysis on affected components
            4. Consider implementing additional quality gates

            ### Analysis Artifacts
            - Analysis report and metrics are available in the workflow artifacts
            - Monitoring results contain detailed quality assessment

            **This issue was automatically created by the AI-Assisted Workflows continuous improvement system.**
            `;

            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'continuous-improvement,critical'
            });

            const similarIssue = existingIssues.data.find(issue =>
              issue.title.includes('Critical Code Quality Issue Detected')
            );

            if (!similarIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['continuous-improvement', 'critical', 'quality-degradation']
              });
            } else {
              // Update existing issue with new information
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: similarIssue.number,
                body: `**New quality degradation detected**\n\nQuality Score: ${qualityScore}\nWorkflow Run: [${runUrl}](${runUrl})`
              });
            }

  # Scheduled Continuous Improvement Cycle (Weekly)
  weekly-improvement-cycle:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'repository_dispatch'

    permissions:
      contents: read
      actions: read
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r shared/lib/scripts/setup/requirements.txt
          pip install requests

      - name: Run Full Analysis Suite
        run: |
          echo "Running comprehensive analysis for improvement cycle..."
          python shared/lib/scripts/run_all_analysis.py --output-format json > full_analysis.json

      - name: Run Improvement Cycle Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running improvement cycle coordination..."
          python shared/lib/scripts/continuous-improvement/workflows/github_monitor.py --output-format json > improvement_cycle.json

          # Trigger repository dispatch for CTO orchestrator if needed
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Handling repository dispatch event: ${{ github.event.action }}"
          fi

      - name: Upload Improvement Cycle Results
        uses: actions/upload-artifact@v3
        with:
          name: weekly-improvement-cycle
          path: |
            full_analysis.json
            improvement_cycle.json
          retention-days: 90
