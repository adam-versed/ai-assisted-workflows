// {{ file.path }} - React Native Expo Router Screen
// Generated from PRD requirements
{% if file.options.expo_router %}
// ADVICE: This screen uses Expo Router file-based routing - place in app/ directory structure
{% endif %}
{% if file.options.navigation %}
// ADVICE: Use useRouter for programmatic navigation and useLocalSearchParams for route params
{% endif %}
{% if file.options.layout %}
// ADVICE: Consider creating a _layout.tsx file for shared screen elements
{% endif %}

import React{% if file.options.state %}, { useState, useEffect }{% endif %} from 'react';
import { View, Text, ScrollView{% if file.options.interactions %}, Pressable{% endif %}{% if file.options.refresh %}, RefreshControl{% endif %} } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
{% if file.options.expo_router %}
import { useRouter, useLocalSearchParams{% if file.options.navigation %}, useFocusEffect{% endif %} } from 'expo-router';
{% endif %}
{% if file.options.status_bar %}
import { StatusBar } from 'expo-status-bar';
{% endif %}
{% if file.options.header %}
import { Stack } from 'expo-router';
{% endif %}

{% if file.options.state %}
interface ScreenState {
  // TODO: Define screen state based on PRD requirements
  data: any[];
  loading: boolean;
  error: string | null;
  {% if file.options.refresh %}
  refreshing: boolean;
  {% endif %}
}
{% endif %}

{% for function in functions %}
{% if function.name == 'default' or 'screen' in function.name.lower() %}
export default function {{ function.name.replace('default', file.path.split('/')[-1].replace('.tsx', '').replace('.jsx', '')) }}() {
  // TODO: {{ function.prd_references | join(', ') }} - {{ function.description }}

  {% if file.options.expo_router %}
  const router = useRouter();
  const params = useLocalSearchParams();
  {% endif %}

  {% if file.options.state %}
  const [state, setState] = useState<ScreenState>({
    data: [],
    loading: true,
    error: null,
    {% if file.options.refresh %}
    refreshing: false,
    {% endif %}
  });

  const loadData = async (isRefresh = false) => {
    if (isRefresh) {
      setState(prev => ({ ...prev, refreshing: true, error: null }));
    } else {
      setState(prev => ({ ...prev, loading: true, error: null }));
    }

    try {
      // TODO: Fetch screen data from API or local storage
      const data = await fetchScreenData(params);
      setState(prev => ({
        ...prev,
        data,
        loading: false,
        {% if file.options.refresh %}
        refreshing: false,
        {% endif %}
      }));
    } catch (error) {
      setState(prev => ({
        ...prev,
        error: error instanceof Error ? error.message : 'Unknown error',
        loading: false,
        {% if file.options.refresh %}
        refreshing: false,
        {% endif %}
      }));
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  {% if file.options.navigation %}
  // Refresh data when screen comes into focus
  useFocusEffect(
    React.useCallback(() => {
      // TODO: Add focus-based data refresh if needed
      console.log('Screen focused');
      return () => {
        console.log('Screen unfocused');
      };
    }, [])
  );
  {% endif %}

  {% if file.options.refresh %}
  const handleRefresh = () => {
    loadData(true);
  };
  {% endif %}
  {% endif %}

  {% if file.options.navigation %}
  const handleNavigation = (route: string, params?: Record<string, any>) => {
    router.push({
      pathname: route as any,
      params
    });
  };

  const handleGoBack = () => {
    router.back();
  };
  {% endif %}

  return (
    <SafeAreaView
      {% if file.options.nativewind %}
      className="flex-1 bg-white"
      {% else %}
      style={{ flex: 1, backgroundColor: '#ffffff' }}
      {% endif %}
    >
      {% if file.options.status_bar %}
      <StatusBar style="auto" />
      {% endif %}

      {% if file.options.header %}
      <Stack.Screen
        options={{
          title: '{{ function.name.replace('default', file.path.split('/')[-1].replace('.tsx', '').replace('.jsx', '')) }}',
          headerShown: true,
          // TODO: Customize header options based on PRD requirements
        }}
      />
      {% endif %}

      <ScrollView
        {% if file.options.nativewind %}
        className="flex-1"
        {% else %}
        style={{ flex: 1 }}
        {% endif %}
        contentContainerStyle={{
          {% if file.options.nativewind %}
          // NativeWind styles applied via className
          {% else %}
          padding: 16,
          {% endif %}
        }}
        {% if file.options.refresh and file.options.state %}
        refreshControl={
          <RefreshControl
            refreshing={state.refreshing}
            onRefresh={handleRefresh}
            colors={['#2563eb']} // Android
            tintColor={'#2563eb'} // iOS
          />
        }
        {% endif %}
        showsVerticalScrollIndicator={false}
      >
        <View
          {% if file.options.nativewind %}
          className="p-4"
          {% else %}
          style={{ padding: 16 }}
          {% endif %}
        >
          {/* Screen Header */}
          <View
            {% if file.options.nativewind %}
            className="mb-6"
            {% else %}
            style={{ marginBottom: 24 }}
            {% endif %}
          >
            <Text
              {% if file.options.nativewind %}
              className="text-3xl font-bold text-gray-900 mb-2"
              {% else %}
              style={{
                fontSize: 28,
                fontWeight: 'bold',
                color: '#111827',
                marginBottom: 8,
              }}
              {% endif %}
            >
              {{ function.name.replace('default', file.path.split('/')[-1].replace('.tsx', '').replace('.jsx', '')) }}
            </Text>

            {% if file.options.expo_router %}
            {params && Object.keys(params).length > 0 && (
              <Text
                {% if file.options.nativewind %}
                className="text-gray-600"
                {% else %}
                style={{ color: '#6b7280' }}
                {% endif %}
              >
                Route params: {JSON.stringify(params, null, 2)}
              </Text>
            )}
            {% endif %}
          </View>

          {/* Screen Content */}
          {% if file.options.state %}
          {state.loading && !state.refreshing && (
            <View
              {% if file.options.nativewind %}
              className="flex-1 justify-center items-center py-12"
              {% else %}
              style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
                paddingVertical: 48,
              }}
              {% endif %}
            >
              <Text
                {% if file.options.nativewind %}
                className="text-gray-600 text-lg"
                {% else %}
                style={{ color: '#6b7280', fontSize: 18 }}
                {% endif %}
              >
                Loading...
              </Text>
            </View>
          )}

          {state.error && (
            <View
              {% if file.options.nativewind %}
              className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4"
              {% else %}
              style={{
                backgroundColor: '#fef2f2',
                borderColor: '#fecaca',
                borderWidth: 1,
                borderRadius: 8,
                padding: 16,
                marginBottom: 16,
              }}
              {% endif %}
            >
              <Text
                {% if file.options.nativewind %}
                className="text-red-800 font-medium"
                {% else %}
                style={{ color: '#991b1b', fontWeight: '500' }}
                {% endif %}
              >
                Error: {state.error}
              </Text>
            </View>
          )}

          {!state.loading && !state.error && (
            <View
              {% if file.options.nativewind %}
              className="space-y-4"
              {% else %}
              style={{ gap: 16 }}
              {% endif %}
            >
              {state.data.length > 0 ? (
                state.data.map((item, index) => (
                  <View
                    key={item.id || index}
                    {% if file.options.nativewind %}
                    className="bg-gray-50 rounded-lg p-4"
                    {% else %}
                    style={{
                      backgroundColor: '#f9fafb',
                      borderRadius: 8,
                      padding: 16,
                    }}
                    {% endif %}
                  >
                    <Text
                      {% if file.options.nativewind %}
                      className="text-gray-900 font-medium text-lg"
                      {% else %}
                      style={{
                        color: '#111827',
                        fontWeight: '500',
                        fontSize: 18,
                      }}
                      {% endif %}
                    >
                      {item.title || item.name || `Item ${index + 1}`}
                    </Text>
                    {item.description && (
                      <Text
                        {% if file.options.nativewind %}
                        className="text-gray-600 mt-2"
                        {% else %}
                        style={{ color: '#6b7280', marginTop: 8 }}
                        {% endif %}
                      >
                        {item.description}
                      </Text>
                    )}
                  </View>
                ))
              ) : (
                <Text
                  {% if file.options.nativewind %}
                  className="text-gray-600 text-center py-8"
                  {% else %}
                  style={{
                    color: '#6b7280',
                    textAlign: 'center',
                    paddingVertical: 32,
                  }}
                  {% endif %}
                >
                  No data available
                </Text>
              )}
            </View>
          )}
          {% else %}
          <View
            {% if file.options.nativewind %}
            className="bg-gray-50 rounded-lg p-6 mb-6"
            {% else %}
            style={{
              backgroundColor: '#f9fafb',
              borderRadius: 8,
              padding: 24,
              marginBottom: 24,
            }}
            {% endif %}
          >
            <Text
              {% if file.options.nativewind %}
              className="text-gray-900 text-lg font-medium mb-2"
              {% else %}
              style={{
                color: '#111827',
                fontSize: 18,
                fontWeight: '500',
                marginBottom: 8,
              }}
              {% endif %}
            >
              Screen Content
            </Text>
            <Text
              {% if file.options.nativewind %}
              className="text-gray-600"
              {% else %}
              style={{ color: '#6b7280' }}
              {% endif %}
            >
              TODO: Implement screen content based on PRD requirements
            </Text>
          </View>
          {% endif %}

          {/* Action Buttons */}
          {% if file.options.navigation %}
          <View
            {% if file.options.nativewind %}
            className="space-y-3"
            {% else %}
            style={{ gap: 12 }}
            {% endif %}
          >
            <Pressable
              onPress={() => handleNavigation('/other-screen', { from: 'current-screen' })}
              {% if file.options.nativewind %}
              className="bg-blue-600 rounded-lg py-3 px-6 active:bg-blue-700"
              {% else %}
              style={{
                backgroundColor: '#2563eb',
                borderRadius: 8,
                paddingVertical: 12,
                paddingHorizontal: 24,
              }}
              {% endif %}
            >
              <Text
                {% if file.options.nativewind %}
                className="text-white font-semibold text-center"
                {% else %}
                style={{
                  color: '#ffffff',
                  fontWeight: '600',
                  textAlign: 'center',
                }}
                {% endif %}
              >
                Navigate Forward
              </Text>
            </Pressable>

            <Pressable
              onPress={handleGoBack}
              {% if file.options.nativewind %}
              className="bg-gray-600 rounded-lg py-3 px-6 active:bg-gray-700"
              {% else %}
              style={{
                backgroundColor: '#6b7280',
                borderRadius: 8,
                paddingVertical: 12,
                paddingHorizontal: 24,
              }}
              {% endif %}
            >
              <Text
                {% if file.options.nativewind %}
                className="text-white font-semibold text-center"
                {% else %}
                style={{
                  color: '#ffffff',
                  fontWeight: '600',
                  textAlign: 'center',
                }}
                {% endif %}
              >
                Go Back
              </Text>
            </Pressable>
          </View>
          {% endif %}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

{% else %}
{{ function.stub_code }}

{% endif %}
{% endfor %}

{% if file.options.state %}
// Helper functions
async function fetchScreenData(params: any): Promise<any[]> {
  // TODO: Implement screen data fetching
  // This could integrate with APIs, AsyncStorage, or other data sources

  await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate loading

  return [
    {
      id: 1,
      title: 'Sample Data Item 1',
      description: 'This is a sample description for the first item',
    },
    {
      id: 2,
      title: 'Sample Data Item 2',
      description: 'This is a sample description for the second item',
    },
  ];
}
{% endif %}

// TypeScript types
export interface ScreenProps {
  // TODO: Define screen props if needed
}

{% if file.options.state %}
export interface ScreenData {
  id: number;
  title: string;
  description?: string;
}
{% endif %}
