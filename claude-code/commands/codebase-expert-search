#!/bin/bash
#
# Codebase Expert Search Command
# ==============================
#
# Wrapper script for invoking the codebase-expert agent with specific search arguments.
# This allows other agents to call the codebase-expert with standardized parameters.
#
# Usage:
#   ./codebase-expert-search --search-type=semantic --query="authentication functions"
#   ./codebase-expert-search --search-type=specific --symbol="login_user"
#   ./codebase-expert-search --search-type=hybrid --query="auth" --symbol="authenticate"
#
# Arguments are parsed and passed to the unified codebase search tool.

set -e

# Default values
SEARCH_TYPE=""
QUERY=""
SYMBOL=""
FILE=""
LINE=""
MODULE=""
MAX_RESULTS=10
THRESHOLD=0.7
FORMAT="json"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --search-type=*)
            SEARCH_TYPE="${1#*=}"
            shift
            ;;
        --query=*)
            QUERY="${1#*=}"
            shift
            ;;
        --symbol=*)
            SYMBOL="${1#*=}"
            shift
            ;;
        --file=*)
            FILE="${1#*=}"
            shift
            ;;
        --line=*)
            LINE="${1#*=}"
            shift
            ;;
        --module=*)
            MODULE="${1#*=}"
            shift
            ;;
        --max-results=*)
            MAX_RESULTS="${1#*=}"
            shift
            ;;
        --threshold=*)
            THRESHOLD="${1#*=}"
            shift
            ;;
        --format=*)
            FORMAT="${1#*=}"
            shift
            ;;
        --help|-h)
            echo "Codebase Expert Search Command"
            echo ""
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Search Types:"
            echo "  --search-type=semantic       Semantic similarity search"
            echo "  --search-type=specific       Find specific symbols"
            echo "  --search-type=pattern        Pattern discovery"
            echo "  --search-type=imports        Import/usage analysis"
            echo "  --search-type=similar        Find similar to existing code"
            echo "  --search-type=hybrid         Combined semantic + specific"
            echo "  --search-type=comprehensive  Full analysis across all tools"
            echo ""
            echo "Parameters:"
            echo "  --query=TEXT                 Natural language query"
            echo "  --symbol=NAME                Specific symbol name"
            echo "  --file=PATH                  File path for similarity search"
            echo "  --line=NUM                   Line number for similarity search"
            echo "  --module=NAME                Module name for import analysis"
            echo ""
            echo "Options:"
            echo "  --max-results=NUM            Maximum results (default: 10)"
            echo "  --threshold=FLOAT            Similarity threshold (default: 0.7)"
            echo "  --format=json|text           Output format (default: json)"
            echo ""
            echo "Examples:"
            echo "  $0 --search-type=semantic --query=\"authentication functions\""
            echo "  $0 --search-type=specific --symbol=\"login_user\""
            echo "  $0 --search-type=hybrid --query=\"auth\" --symbol=\"authenticate\""
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information."
            exit 1
            ;;
    esac
done

# Validate required arguments
if [ -z "$SEARCH_TYPE" ]; then
    echo "Error: --search-type is required"
    echo "Use --help for usage information."
    exit 1
fi

# Build argument array for proper quote handling
CMD_ARGS=("--search-type" "$SEARCH_TYPE")

if [ -n "$QUERY" ]; then
    CMD_ARGS+=("--query" "$QUERY")
fi

if [ -n "$SYMBOL" ]; then
    CMD_ARGS+=("--symbol" "$SYMBOL")
fi

if [ -n "$FILE" ]; then
    CMD_ARGS+=("--file" "$FILE")
fi

if [ -n "$LINE" ]; then
    CMD_ARGS+=("--line" "$LINE")
fi

if [ -n "$MODULE" ]; then
    CMD_ARGS+=("--module" "$MODULE")
fi

CMD_ARGS+=("--max-results" "$MAX_RESULTS" "--threshold" "$THRESHOLD" "--format" "$FORMAT")

# Find the project root (directory containing this script's parent)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Execute the unified codebase search tool
echo "Executing codebase search with: $SEARCH_TYPE" >&2

cd "$PROJECT_ROOT"
PYTHONPATH="$PROJECT_ROOT" python shared/ci/tools/unified_codebase_search.py "${CMD_ARGS[@]}"
