// {{ file.path }} - React Router Page Component
// Generated from PRD requirements
{% if file.options.seo %}
// ADVICE: Use document.title and meta tags for SEO optimization in SPA routes
{% endif %}
{% if file.options.error_boundary %}
// ADVICE: Implement error boundaries for robust error handling in page components
{% endif %}
{% if file.options.breadcrumbs %}
// ADVICE: Use location.pathname to build breadcrumb navigation
{% endif %}

import React, { useEffect{% if file.options.state %}, useState{% endif %} } from 'react';
import {
  useNavigate,
  useLocation,
  useParams{% if file.options.data_loading %},
  useLoaderData,
  useNavigation{% endif %}{% if file.options.error_boundary %},
  useRouteError,
  isRouteErrorResponse{% endif %}
} from 'react-router-dom';
{% if file.options.forms %}
import { Form, useActionData, useSubmit } from 'react-router-dom';
{% endif %}

{% if file.options.seo %}
// SEO metadata interface
interface PageMeta {
  title: string;
  description?: string;
  keywords?: string[];
  ogTitle?: string;
  ogDescription?: string;
}
{% endif %}

{% if file.options.data_loading %}
// Page data interface
interface PageData {
  // TODO: Define page data structure based on PRD requirements
  title: string;
  content: any;
  meta?: {
    lastUpdated: string;
    author?: string;
  };
}
{% endif %}

interface Props {
  // TODO: Define page props based on PRD requirements
  className?: string;
}

{% for function in functions %}
{% if function.name == 'default' or 'page' in function.name.lower() %}
export default function {{ function.name.replace('default', file.path.split('/')[-1].replace('.tsx', '').replace('.jsx', '')) }}({
  className = ''
}: Props) {
  // TODO: {{ function.prd_references | join(', ') }} - {{ function.description }}

  const navigate = useNavigate();
  const location = useLocation();
  const params = useParams();

  {% if file.options.data_loading %}
  const pageData = useLoaderData() as PageData;
  const navigation = useNavigation();
  const isLoading = navigation.state === 'loading';
  {% endif %}

  {% if file.options.forms %}
  const actionData = useActionData();
  const submit = useSubmit();
  {% endif %}

  {% if file.options.state %}
  const [pageState, setPageState] = useState({
    // TODO: Define page-specific state
    activeSection: 'overview',
    showSidebar: true,
    filters: {},
  });
  {% endif %}

  {% if file.options.seo %}
  // SEO metadata for this page
  const pageMeta: PageMeta = {
    title: {% if file.options.data_loading %}`${pageData?.title || '{{ function.name }}'} | Your App`{% else %}'{{ function.name }} | Your App'{% endif %},
    description: 'Page description for SEO',
    keywords: ['keyword1', 'keyword2', 'keyword3'],
    ogTitle: {% if file.options.data_loading %}`${pageData?.title || '{{ function.name }}'}`{% else %}'{{ function.name }}'{% endif %},
    ogDescription: 'Open Graph description for social sharing',
  };

  // Update document head for SEO
  useEffect(() => {
    document.title = pageMeta.title;

    // Update meta description
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.setAttribute('content', pageMeta.description || '');
    }

    // Update meta keywords
    const metaKeywords = document.querySelector('meta[name="keywords"]');
    if (metaKeywords && pageMeta.keywords) {
      metaKeywords.setAttribute('content', pageMeta.keywords.join(', '));
    }

    // Update Open Graph meta tags
    const ogTitle = document.querySelector('meta[property="og:title"]');
    if (ogTitle) {
      ogTitle.setAttribute('content', pageMeta.ogTitle || pageMeta.title);
    }

    const ogDescription = document.querySelector('meta[property="og:description"]');
    if (ogDescription) {
      ogDescription.setAttribute('content', pageMeta.ogDescription || pageMeta.description || '');
    }
  }, [pageMeta]);
  {% endif %}

  {% if file.options.breadcrumbs %}
  // Generate breadcrumbs from current path
  const breadcrumbs = generateBreadcrumbs(location.pathname, params);
  {% endif %}

  // Page-specific navigation handlers
  const handleNavigateToSection = (section: string) => {
    {% if file.options.state %}
    setPageState(prev => ({ ...prev, activeSection: section }));
    {% endif %}
    navigate(`${location.pathname}#${section}`, { replace: true });
  };

  const handleNavigateWithState = (path: string, state?: any) => {
    navigate(path, {
      state: {
        from: location.pathname,
        timestamp: Date.now(),
        ...state
      }
    });
  };

  {% if file.options.forms %}
  // Form handlers
  const handleQuickAction = (action: string, data?: any) => {
    const formData = new FormData();
    formData.append('action', action);
    if (data) {
      Object.entries(data).forEach(([key, value]) => {
        formData.append(key, String(value));
      });
    }

    submit(formData, { method: 'post' });
  };
  {% endif %}

  return (
    <div className={`page-container ${className}`}>
      {% if file.options.breadcrumbs %}
      {/* Breadcrumb Navigation */}
      <nav className="breadcrumb-nav" aria-label="Breadcrumb">
        <ol className="breadcrumb-list">
          {breadcrumbs.map((crumb, index) => (
            <li key={index} className="breadcrumb-item">
              {index < breadcrumbs.length - 1 ? (
                <button
                  onClick={() => navigate(crumb.path)}
                  className="breadcrumb-link"
                >
                  {crumb.label}
                </button>
              ) : (
                <span className="breadcrumb-current" aria-current="page">
                  {crumb.label}
                </span>
              )}
              {index < breadcrumbs.length - 1 && (
                <span className="breadcrumb-separator" aria-hidden="true">
                  /
                </span>
              )}
            </li>
          ))}
        </ol>
      </nav>
      {% endif %}

      {/* Page Header */}
      <header className="page-header">
        <div className="page-title-section">
          <h1 className="page-title">
            {% if file.options.data_loading %}
            {pageData?.title || '{{ function.name }}'}
            {% else %}
            {{ function.name }}
            {% endif %}
          </h1>
          {% if file.options.data_loading %}
          {pageData?.meta && (
            <div className="page-meta">
              <p>Last updated: {new Date(pageData.meta.lastUpdated).toLocaleDateString()}</p>
              {pageData.meta.author && <p>By: {pageData.meta.author}</p>}
            </div>
          )}
          {% endif %}
        </div>

        {/* Page Actions */}
        <div className="page-actions">
          <button
            onClick={() => handleNavigateWithState('/dashboard')}
            className="action-button primary"
          >
            Dashboard
          </button>
          {% if file.options.forms %}
          <button
            onClick={() => handleQuickAction('favorite', { pageId: params.id })}
            className="action-button secondary"
          >
            Add to Favorites
          </button>
          {% endif %}
        </div>
      </header>

      {% if file.options.data_loading %}
      {/* Loading State */}
      {isLoading && (
        <div className="page-loading">
          <div className="loading-spinner" />
          <p>Loading page content...</p>
        </div>
      )}
      {% endif %}

      {/* Main Page Content */}
      <main className="page-main">
        {% if file.options.data_loading %}
        {!isLoading && pageData && (
          <div className="page-content">
            <section className="content-section">
              <h2>Page Content</h2>
              <div className="content-body">
                {typeof pageData.content === 'string' ? (
                  <p>{pageData.content}</p>
                ) : (
                  <pre>{JSON.stringify(pageData.content, null, 2)}</pre>
                )}
              </div>
            </section>
          </div>
        )}
        {% else %}
        <div className="page-content">
          <section className="content-section">
            <h2>Welcome to {{ function.name }}</h2>
            <p>This is a React Router page component.</p>

            {/* Route Information */}
            <div className="route-info">
              <h3>Route Information</h3>
              <ul>
                <li><strong>Current Path:</strong> {location.pathname}</li>
                <li><strong>Search:</strong> {location.search || 'None'}</li>
                <li><strong>Hash:</strong> {location.hash || 'None'}</li>
                {location.state && (
                  <li><strong>State:</strong> {JSON.stringify(location.state)}</li>
                )}
              </ul>

              {Object.keys(params).length > 0 && (
                <div>
                  <h4>URL Parameters:</h4>
                  <ul>
                    {Object.entries(params).map(([key, value]) => (
                      <li key={key}><strong>{key}:</strong> {value}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </section>
        </div>
        {% endif %}

        {% if file.options.forms %}
        {/* Page-specific Forms */}
        <section className="form-section">
          <h2>Page Actions</h2>
          <Form method="post" className="page-form">
            <div className="form-group">
              <label htmlFor="message">Quick Message:</label>
              <textarea
                id="message"
                name="message"
                rows={3}
                placeholder="Enter your message..."
              />
            </div>

            <div className="form-group">
              <label htmlFor="priority">Priority:</label>
              <select id="priority" name="priority">
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
              </select>
            </div>

            <button type="submit" className="form-submit">
              Submit
            </button>
          </Form>

          {actionData && (
            <div className="action-result">
              <pre>{JSON.stringify(actionData, null, 2)}</pre>
            </div>
          )}
        </section>
        {% endif %}

        {/* Navigation Section */}
        <section className="navigation-section">
          <h2>Navigation</h2>
          <div className="nav-buttons">
            <button
              onClick={() => handleNavigateToSection('overview')}
              className="nav-button"
            >
              Overview
            </button>
            <button
              onClick={() => handleNavigateToSection('details')}
              className="nav-button"
            >
              Details
            </button>
            <button
              onClick={() => handleNavigateWithState('/related-page', { source: 'page' })}
              className="nav-button"
            >
              Related Page
            </button>
          </div>
        </section>
      </main>

      {/* Page Footer */}
      <footer className="page-footer">
        <div className="footer-content">
          <p>Page loaded at: {new Date().toLocaleTimeString()}</p>
          <button
            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
            className="scroll-top-button"
          >
            Back to Top
          </button>
        </div>
      </footer>
    </div>
  );
}

{% else %}
{{ function.stub_code }}

{% endif %}
{% endfor %}

{% if file.options.breadcrumbs %}
// Breadcrumb generation helper
function generateBreadcrumbs(pathname: string, params: any) {
  const segments = pathname.split('/').filter(Boolean);
  const breadcrumbs = [{ label: 'Home', path: '/' }];

  let currentPath = '';
  segments.forEach((segment, index) => {
    currentPath += `/${segment}`;

    // Replace dynamic segments with actual values
    const label = params[segment] || segment.charAt(0).toUpperCase() + segment.slice(1);

    breadcrumbs.push({
      label,
      path: currentPath,
    });
  });

  return breadcrumbs;
}
{% endif %}

{% if file.options.error_boundary %}
// Error Boundary Component
export function PageErrorBoundary() {
  const error = useRouteError();

  if (isRouteErrorResponse(error)) {
    return (
      <div className="error-page">
        <h1>Oops!</h1>
        <h2>{error.status}</h2>
        <p>{error.statusText}</p>
        {error.data?.message && <p>{error.data.message}</p>}
      </div>
    );
  }

  return (
    <div className="error-page">
      <h1>Oops! Something went wrong</h1>
      <p>{error instanceof Error ? error.message : 'Unknown error'}</p>
    </div>
  );
}
{% endif %}

// TypeScript types
export interface PageProps extends Props {}

{% if file.options.breadcrumbs %}
export interface Breadcrumb {
  label: string;
  path: string;
}
{% endif %}
