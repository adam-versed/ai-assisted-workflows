// {{ file.path }} - Clerk Authentication Provider
// Generated from PRD requirements
{% if file.options.nextjs %}
// ADVICE: Use ClerkProvider in your Next.js app layout for global authentication state
{% endif %}
{% if file.options.custom_pages %}
// ADVICE: Add custom pages to UserProfile and SignIn components for branded experience
{% endif %}
{% if file.options.organizations %}
// ADVICE: Enable organization features for multi-tenant applications
{% endif %}

{% if file.options.nextjs %}
import { ClerkProvider } from '@clerk/nextjs';
{% else %}
import { ClerkProvider } from '@clerk/clerk-react';
{% endif %}
import { dark } from '@clerk/themes';
import React from 'react';

// Clerk configuration options
const clerkConfig = {
  // Appearance customization
  appearance: {
    baseTheme: {% if file.options.dark_theme %}dark{% else %}undefined{% endif %},
    variables: {
      colorPrimary: '#3b82f6', // Blue-500
      colorSuccess: '#10b981', // Green-500
      colorWarning: '#f59e0b', // Yellow-500
      colorDanger: '#ef4444',  // Red-500
      fontFamily: 'Inter, system-ui, sans-serif',
      borderRadius: '0.5rem',
    },
    elements: {
      // Customize specific elements
      formButtonPrimary: {
        backgroundColor: '#3b82f6',
        '&:hover': {
          backgroundColor: '#2563eb',
        },
      },
      card: {
        boxShadow: '0 10px 15px -3px rgb(0 0 0 / 0.1)',
      },
      headerTitle: {
        fontSize: '1.5rem',
        fontWeight: '600',
      },
      socialButtonsIconButton: {
        borderColor: '#d1d5db',
      },
    },
  },

  // Localization
  {% if file.options.localization %}
  localization: {
    locale: 'en-US', // TODO: Configure based on user preference
  },
  {% endif %}

  // Sign-in/Sign-up options
  signInUrl: '/sign-in',
  signUpUrl: '/sign-up',
  afterSignInUrl: '/dashboard',
  afterSignUpUrl: '/onboarding',

  {% if file.options.custom_pages %}
  // Custom pages configuration
  signIn: {
    elements: {
      rootBox: {
        width: '100%',
        maxWidth: '400px',
        margin: '0 auto',
      },
    },
  },

  userProfile: {
    elements: {
      rootBox: {
        width: '100%',
        maxWidth: '600px',
      },
    },
  },
  {% endif %}
};

interface Props {
  children: React.ReactNode;
  {% if file.options.custom_theme %}
  theme?: 'light' | 'dark';
  {% endif %}
}

{% for function in functions %}
{% if function.name == 'default' or 'provider' in function.name.lower() %}
export default function {{ function.name.replace('default', file.path.split('/')[-1].replace('.tsx', '').replace('.jsx', '')) }}({
  children,
  {% if file.options.custom_theme %}
  theme = 'light',
  {% endif %}
}: Props) {
  // TODO: {{ function.prd_references | join(', ') }} - {{ function.description }}

  // Get Clerk publishable key from environment
  const publishableKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY ||
                         process.env.VITE_CLERK_PUBLISHABLE_KEY ||
                         process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;

  if (!publishableKey) {
    throw new Error(
      'Missing Clerk Publishable Key. Please add your key to environment variables:\n' +
      '- Next.js: NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY\n' +
      '- Vite: VITE_CLERK_PUBLISHABLE_KEY\n' +
      '- Create React App: REACT_APP_CLERK_PUBLISHABLE_KEY'
    );
  }

  // Dynamic theme configuration
  const appearanceConfig = {
    ...clerkConfig.appearance,
    {% if file.options.custom_theme %}
    baseTheme: theme === 'dark' ? dark : undefined,
    {% endif %}
    variables: {
      ...clerkConfig.appearance.variables,
      {% if file.options.custom_theme %}
      colorBackground: theme === 'dark' ? '#1f2937' : '#ffffff',
      colorText: theme === 'dark' ? '#f9fafb' : '#111827',
      colorInputBackground: theme === 'dark' ? '#374151' : '#ffffff',
      colorInputText: theme === 'dark' ? '#f9fafb' : '#111827',
      {% endif %}
    },
  };

  return (
    <ClerkProvider
      publishableKey={publishableKey}
      appearance={appearanceConfig}
      {% if file.options.nextjs %}
      // Next.js specific options
      signInUrl="/sign-in"
      signUpUrl="/sign-up"
      afterSignInUrl="/dashboard"
      afterSignUpUrl="/onboarding"
      {% endif %}
      {% if file.options.organizations %}
      // Organization features
      afterCreateOrganizationUrl="/organization/:id"
      afterSelectOrganizationUrl="/organization/:id"
      {% endif %}
      {...clerkConfig}
    >
      {children}
    </ClerkProvider>
  );
}

{% else %}
{{ function.stub_code }}

{% endif %}
{% endfor %}

// Authentication status components for conditional rendering
export function AuthenticatedOnly({ children }: { children: React.ReactNode }) {
  {% if file.options.nextjs %}
  const { SignedIn } = require('@clerk/nextjs');
  {% else %}
  const { SignedIn } = require('@clerk/clerk-react');
  {% endif %}

  return <SignedIn>{children}</SignedIn>;
}

export function UnauthenticatedOnly({ children }: { children: React.ReactNode }) {
  {% if file.options.nextjs %}
  const { SignedOut } = require('@clerk/nextjs');
  {% else %}
  const { SignedOut } = require('@clerk/clerk-react');
  {% endif %}

  return <SignedOut>{children}</SignedOut>;
}

// Loading component for authentication states
export function AuthLoading() {
  return (
    <div className="auth-loading">
      <div className="loading-spinner" />
      <p>Loading authentication...</p>
    </div>
  );
}

// Error boundary for authentication errors
export function AuthErrorBoundary({
  children,
  fallback
}: {
  children: React.ReactNode;
  fallback?: React.ComponentType<{ error: Error }>;
}) {
  const [hasError, setHasError] = React.useState(false);
  const [error, setError] = React.useState<Error | null>(null);

  React.useEffect(() => {
    const handleError = (error: ErrorEvent) => {
      if (error.message.includes('Clerk')) {
        setHasError(true);
        setError(new Error(error.message));
      }
    };

    window.addEventListener('error', handleError);
    return () => window.removeEventListener('error', handleError);
  }, []);

  if (hasError && error) {
    if (fallback) {
      const FallbackComponent = fallback;
      return <FallbackComponent error={error} />;
    }

    return (
      <div className="auth-error">
        <h2>Authentication Error</h2>
        <p>{error.message}</p>
        <button onClick={() => window.location.reload()}>
          Reload Page
        </button>
      </div>
    );
  }

  return <>{children}</>;
}

// Custom authentication hooks
export function useAuthState() {
  {% if file.options.nextjs %}
  const { useAuth } = require('@clerk/nextjs');
  {% else %}
  const { useAuth } = require('@clerk/clerk-react');
  {% endif %}

  const { isLoaded, isSignedIn, userId, sessionId, getToken } = useAuth();

  return {
    isLoaded,
    isSignedIn,
    userId,
    sessionId,
    getToken,
    // Convenience flags
    isAuthenticated: isLoaded && isSignedIn,
    isUnauthenticated: isLoaded && !isSignedIn,
    isLoading: !isLoaded,
  };
}

export function useUserData() {
  {% if file.options.nextjs %}
  const { useUser } = require('@clerk/nextjs');
  {% else %}
  const { useUser } = require('@clerk/clerk-react');
  {% endif %}

  const { isLoaded, isSignedIn, user } = useUser();

  return {
    isLoaded,
    isSignedIn,
    user,
    // User properties
    email: user?.primaryEmailAddress?.emailAddress,
    firstName: user?.firstName,
    lastName: user?.lastName,
    fullName: user?.fullName,
    username: user?.username,
    imageUrl: user?.imageUrl,
    // Convenience methods
    updateUser: user?.update,
    reload: user?.reload,
  };
}

{% if file.options.organizations %}
// Organization management hook
export function useOrganization() {
  {% if file.options.nextjs %}
  const { useOrganization: useClerkOrganization } = require('@clerk/nextjs');
  {% else %}
  const { useOrganization: useClerkOrganization } = require('@clerk/clerk-react');
  {% endif %}

  const { isLoaded, organization, membership } = useClerkOrganization();

  return {
    isLoaded,
    organization,
    membership,
    // Organization properties
    orgName: organization?.name,
    orgSlug: organization?.slug,
    orgImageUrl: organization?.imageUrl,
    // User's role in organization
    role: membership?.role,
    isAdmin: membership?.role === 'admin',
    isMember: membership?.role === 'basic_member',
  };
}
{% endif %}

// Clerk theme configuration helper
export function createClerkTheme(options: {
  primaryColor?: string;
  borderRadius?: string;
  fontFamily?: string;
}) {
  return {
    variables: {
      colorPrimary: options.primaryColor || '#3b82f6',
      borderRadius: options.borderRadius || '0.5rem',
      fontFamily: options.fontFamily || 'Inter, system-ui, sans-serif',
    },
  };
}

// TypeScript types
export interface ClerkProviderProps extends Props {}

export interface AuthState {
  isLoaded: boolean;
  isSignedIn: boolean;
  userId: string | null | undefined;
  sessionId: string | null | undefined;
  isAuthenticated: boolean;
  isUnauthenticated: boolean;
  isLoading: boolean;
}

export interface UserData {
  isLoaded: boolean;
  isSignedIn: boolean;
  user: any; // Use Clerk's User type
  email?: string;
  firstName?: string | null;
  lastName?: string | null;
  fullName?: string | null;
  username?: string | null;
  imageUrl?: string;
}
