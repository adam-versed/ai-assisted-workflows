// {{ file.path }} - TanStack Table Component
// Generated from PRD requirements
{% if file.options.sorting %}
// ADVICE: Enable sorting with getSortedRowModel for client-side or server-side sorting
{% endif %}
{% if file.options.filtering %}
// ADVICE: Use getFilteredRowModel for client-side filtering or implement server-side filtering
{% endif %}
{% if file.options.pagination %}
// ADVICE: Use getPaginationRowModel for client-side pagination or implement server-side pagination
{% endif %}

import React, { useState, useMemo } from 'react';
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable{% if file.options.sorting %},
  getSortedRowModel,
  type SortingState{% endif %}{% if file.options.filtering %},
  getFilteredRowModel,
  type ColumnFiltersState{% endif %}{% if file.options.pagination %},
  getPaginationRowModel{% endif %}{% if file.options.selection %},
  type RowSelectionState{% endif %}{% if file.options.virtualization %},
  type Row{% endif %}
} from '@tanstack/react-table';
{% if file.options.virtualization %}
import { useVirtualizer } from '@tanstack/react-virtual';
{% endif %}

// Data type definition
interface TableData {
  // TODO: Define your data structure based on PRD requirements
  id: string;
  name: string;
  email: string;
  status: 'active' | 'inactive' | 'pending';
  createdAt: string;
  updatedAt: string;
  role?: string;
  department?: string;
}

// Column helper for type safety
const columnHelper = createColumnHelper<TableData>();

// Table props interface
interface Props {
  data: TableData[];
  loading?: boolean;
  error?: string | null;
  className?: string;
  {% if file.options.pagination %}
  pageSize?: number;
  {% endif %}
  {% if file.options.selection %}
  onSelectionChange?: (selectedRows: TableData[]) => void;
  enableMultiSelection?: boolean;
  {% endif %}
  {% if file.options.actions %}
  onEdit?: (row: TableData) => void;
  onDelete?: (row: TableData) => void;
  onView?: (row: TableData) => void;
  {% endif %}
}

{% for function in functions %}
{% if function.name == 'default' or 'table' in function.name.lower() %}
export default function {{ function.name.replace('default', file.path.split('/')[-1].replace('.tsx', '').replace('.jsx', '')) }}({
  data,
  loading = false,
  error = null,
  className = '',
  {% if file.options.pagination %}
  pageSize = 10,
  {% endif %}
  {% if file.options.selection %}
  onSelectionChange,
  enableMultiSelection = true,
  {% endif %}
  {% if file.options.actions %}
  onEdit,
  onDelete,
  onView,
  {% endif %}
}: Props) {
  // TODO: {{ function.prd_references | join(', ') }} - {{ function.description }}

  {% if file.options.sorting %}
  const [sorting, setSorting] = useState<SortingState>([]);
  {% endif %}
  {% if file.options.filtering %}
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [globalFilter, setGlobalFilter] = useState('');
  {% endif %}
  {% if file.options.selection %}
  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});
  {% endif %}
  {% if file.options.column_visibility %}
  const [columnVisibility, setColumnVisibility] = useState({});
  {% endif %}

  // Column definitions
  const columns = useMemo(
    () => [
      {% if file.options.selection %}
      // Selection column
      columnHelper.display({
        id: 'select',
        header: ({ table }) => (
          <input
            type="checkbox"
            checked={table.getIsAllRowsSelected()}
            indeterminate={table.getIsSomeRowsSelected()}
            onChange={table.getToggleAllRowsSelectedHandler()}
            className="table-checkbox"
          />
        ),
        cell: ({ row }) => (
          <input
            type="checkbox"
            checked={row.getIsSelected()}
            disabled={!row.getCanSelect()}
            onChange={row.getToggleSelectedHandler()}
            className="table-checkbox"
          />
        ),
        size: 40,
      }),
      {% endif %}

      // Data columns
      columnHelper.accessor('name', {
        header: 'Name',
        cell: (info) => (
          <div className="name-cell">
            <span className="name-text">{info.getValue()}</span>
          </div>
        ),
        {% if file.options.sorting %}
        enableSorting: true,
        {% endif %}
        {% if file.options.filtering %}
        filterFn: 'includesString',
        {% endif %}
      }),

      columnHelper.accessor('email', {
        header: 'Email',
        cell: (info) => (
          <a
            href={`mailto:${info.getValue()}`}
            className="email-link"
          >
            {info.getValue()}
          </a>
        ),
        {% if file.options.sorting %}
        enableSorting: true,
        {% endif %}
        {% if file.options.filtering %}
        filterFn: 'includesString',
        {% endif %}
      }),

      columnHelper.accessor('status', {
        header: 'Status',
        cell: (info) => {
          const status = info.getValue();
          return (
            <span className={`status-badge status-${status}`}>
              {status.charAt(0).toUpperCase() + status.slice(1)}
            </span>
          );
        },
        {% if file.options.sorting %}
        enableSorting: true,
        {% endif %}
        {% if file.options.filtering %}
        filterFn: 'equals',
        {% endif %}
      }),

      columnHelper.accessor('createdAt', {
        header: 'Created',
        cell: (info) => new Date(info.getValue()).toLocaleDateString(),
        {% if file.options.sorting %}
        enableSorting: true,
        sortingFn: 'datetime',
        {% endif %}
      }),

      {% if file.options.actions %}
      // Actions column
      columnHelper.display({
        id: 'actions',
        header: 'Actions',
        cell: (info) => {
          const row = info.row.original;
          return (
            <div className="actions-cell">
              {onView && (
                <button
                  onClick={() => onView(row)}
                  className="action-button view"
                  title="View"
                >
                  üëÅÔ∏è
                </button>
              )}
              {onEdit && (
                <button
                  onClick={() => onEdit(row)}
                  className="action-button edit"
                  title="Edit"
                >
                  ‚úèÔ∏è
                </button>
              )}
              {onDelete && (
                <button
                  onClick={() => onDelete(row)}
                  className="action-button delete"
                  title="Delete"
                >
                  üóëÔ∏è
                </button>
              )}
            </div>
          );
        },
        size: 120,
        enableSorting: false,
      }),
      {% endif %}
    ],
    [{% if file.options.actions %}onEdit, onDelete, onView{% endif %}]
  );

  // Table instance
  const table = useReactTable({
    data,
    columns,
    state: {
      {% if file.options.sorting %}
      sorting,
      {% endif %}
      {% if file.options.filtering %}
      columnFilters,
      globalFilter,
      {% endif %}
      {% if file.options.selection %}
      rowSelection,
      {% endif %}
      {% if file.options.column_visibility %}
      columnVisibility,
      {% endif %}
    },

    // Core functionality
    getCoreRowModel: getCoreRowModel(),

    {% if file.options.sorting %}
    // Sorting
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    enableSorting: true,
    {% endif %}

    {% if file.options.filtering %}
    // Filtering
    onColumnFiltersChange: setColumnFilters,
    onGlobalFilterChange: setGlobalFilter,
    getFilteredRowModel: getFilteredRowModel(),
    globalFilterFn: 'includesString',
    {% endif %}

    {% if file.options.pagination %}
    // Pagination
    getPaginationRowModel: getPaginationRowModel(),
    initialState: {
      pagination: {
        pageSize,
      },
    },
    {% endif %}

    {% if file.options.selection %}
    // Selection
    onRowSelectionChange: setRowSelection,
    enableRowSelection: true,
    enableMultiRowSelection: enableMultiSelection,
    {% endif %}

    {% if file.options.column_visibility %}
    // Column visibility
    onColumnVisibilityChange: setColumnVisibility,
    {% endif %}
  });

  {% if file.options.selection %}
  // Handle selection changes
  React.useEffect(() => {
    if (onSelectionChange) {
      const selectedRows = table.getSelectedRowModel().rows.map(row => row.original);
      onSelectionChange(selectedRows);
    }
  }, [rowSelection, onSelectionChange, table]);
  {% endif %}

  {% if file.options.virtualization %}
  // Virtualization setup
  const tableContainerRef = React.useRef<HTMLDivElement>(null);

  const rowVirtualizer = useVirtualizer({
    count: table.getRowModel().rows.length,
    getScrollElement: () => tableContainerRef.current,
    estimateSize: () => 50,
    overscan: 10,
  });
  {% endif %}

  // Loading state
  if (loading) {
    return (
      <div className={`table-container loading ${className}`}>
        <div className="table-loading">
          <div className="spinner" />
          <p>Loading table data...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className={`table-container error ${className}`}>
        <div className="table-error">
          <h3>Error loading table data</h3>
          <p>{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`table-container ${className}`}>
      {/* Table Header Controls */}
      <div className="table-header">
        {% if file.options.filtering %}
        <div className="table-search">
          <input
            type="text"
            placeholder="Search all columns..."
            value={globalFilter}
            onChange={(e) => setGlobalFilter(e.target.value)}
            className="global-search-input"
          />
        </div>
        {% endif %}

        <div className="table-info">
          <span className="total-count">
            Total: {table.getFilteredRowModel().rows.length} items
          </span>
          {% if file.options.selection %}
          {table.getSelectedRowModel().rows.length > 0 && (
            <span className="selected-count">
              Selected: {table.getSelectedRowModel().rows.length}
            </span>
          )}
          {% endif %}
        </div>

        {% if file.options.column_visibility %}
        <div className="column-visibility">
          <select
            onChange={(e) => {
              const column = table.getAllColumns().find(col => col.id === e.target.value);
              column?.toggleVisibility();
            }}
            className="column-toggle"
          >
            <option value="">Toggle Column</option>
            {table.getAllColumns()
              .filter(column => typeof column.accessorFn !== 'undefined')
              .map(column => (
                <option key={column.id} value={column.id}>
                  {typeof column.columnDef.header === 'string'
                    ? column.columnDef.header
                    : column.id}
                </option>
              ))}
          </select>
        </div>
        {% endif %}
      </div>

      {/* Table */}
      <div
        className="table-wrapper"
        {% if file.options.virtualization %}
        ref={tableContainerRef}
        style={{ height: '400px', overflow: 'auto' }}
        {% endif %}
      >
        <table className="data-table">
          <thead className="table-head">
            {table.getHeaderGroups().map(headerGroup => (
              <tr key={headerGroup.id} className="header-row">
                {headerGroup.headers.map(header => (
                  <th
                    key={header.id}
                    className={`header-cell ${
                      {% if file.options.sorting %}
                      header.column.getCanSort() ? 'sortable' : ''
                      {% endif %}
                    }`}
                    {% if file.options.sorting %}
                    onClick={header.column.getToggleSortingHandler()}
                    {% endif %}
                    style={{ width: header.getSize() }}
                  >
                    <div className="header-content">
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                      {% if file.options.sorting %}
                      {header.column.getCanSort() && (
                        <span className="sort-indicator">
                          {{
                            asc: ' üîº',
                            desc: ' üîΩ',
                          }[header.column.getIsSorted() as string] ?? ' ‚ÜïÔ∏è'}
                        </span>
                      )}
                      {% endif %}
                    </div>
                    {% if file.options.filtering %}
                    {header.column.getCanFilter() ? (
                      <div className="column-filter">
                        <input
                          type="text"
                          value={(header.column.getFilterValue() ?? '') as string}
                          onChange={(e) => header.column.setFilterValue(e.target.value)}
                          placeholder={`Filter ${header.column.id}...`}
                          className="column-filter-input"
                        />
                      </div>
                    ) : null}
                    {% endif %}
                  </th>
                ))}
              </tr>
            ))}
          </thead>

          <tbody className="table-body">
            {% if file.options.virtualization %}
            <tr style={{ height: `${rowVirtualizer.getTotalSize()}px` }}>
              <td colSpan={table.getAllColumns().length} style={{ padding: 0 }}>
                <div style={{ position: 'relative' }}>
                  {rowVirtualizer.getVirtualItems().map(virtualRow => {
                    const row = table.getRowModel().rows[virtualRow.index];
                    return (
                      <div
                        key={row.id}
                        style={{
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          width: '100%',
                          height: `${virtualRow.size}px`,
                          transform: `translateY(${virtualRow.start}px)`,
                        }}
                      >
                        {row.getVisibleCells().map(cell => (
                          <div
                            key={cell.id}
                            style={{
                              display: 'inline-block',
                              width: cell.column.getSize(),
                              padding: '8px',
                            }}
                          >
                            {flexRender(cell.column.columnDef.cell, cell.getContext())}
                          </div>
                        ))}
                      </div>
                    );
                  })}
                </div>
              </td>
            </tr>
            {% else %}
            {table.getRowModel().rows.map(row => (
              <tr
                key={row.id}
                className={`table-row ${
                  {% if file.options.selection %}
                  row.getIsSelected() ? 'selected' : ''
                  {% endif %}
                }`}
              >
                {row.getVisibleCells().map(cell => (
                  <td
                    key={cell.id}
                    className="table-cell"
                    style={{ width: cell.column.getSize() }}
                  >
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
            {% endif %}
          </tbody>
        </table>

        {/* Empty state */}
        {table.getRowModel().rows.length === 0 && (
          <div className="empty-state">
            <p>No data available</p>
          </div>
        )}
      </div>

      {% if file.options.pagination %}
      {/* Pagination */}
      <div className="table-pagination">
        <div className="pagination-info">
          <span>
            Page {table.getState().pagination.pageIndex + 1} of{' '}
            {table.getPageCount()}
          </span>
          <span>
            ({table.getFilteredRowModel().rows.length} total rows)
          </span>
        </div>

        <div className="pagination-controls">
          <button
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
            className="pagination-button"
          >
            {'<<'}
          </button>
          <button
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
            className="pagination-button"
          >
            {'<'}
          </button>
          <button
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
            className="pagination-button"
          >
            {'>'}
          </button>
          <button
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
            className="pagination-button"
          >
            {'>>'}
          </button>
        </div>

        <div className="page-size-selector">
          <select
            value={table.getState().pagination.pageSize}
            onChange={e => {
              table.setPageSize(Number(e.target.value))
            }}
            className="page-size-select"
          >
            {[10, 20, 30, 40, 50].map(pageSize => (
              <option key={pageSize} value={pageSize}>
                Show {pageSize}
              </option>
            ))}
          </select>
        </div>
      </div>
      {% endif %}
    </div>
  );
}

{% else %}
{{ function.stub_code }}

{% endif %}
{% endfor %}

// Utility hooks for table management
export function useTableHelpers<T>() {
  return {
    createColumn: (accessor: keyof T, options?: any) => {
      return columnHelper.accessor(accessor as any, options);
    },

    createDisplayColumn: (id: string, options: any) => {
      return columnHelper.display({ id, ...options });
    },

    formatDate: (dateString: string) => {
      return new Date(dateString).toLocaleDateString();
    },

    formatCurrency: (amount: number) => {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(amount);
    },
  };
}

// TypeScript types
export interface TableComponentProps extends Props {}
export type { TableData };
