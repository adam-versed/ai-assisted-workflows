# Development Monitoring Makefile
# Generated by setup-dev-monitoring on 2025-07-21 12:31:52
# Components: FRONTEND, BACKEND

# WARNING: Claude should NEVER run 'make dev' or 'make start' commands
# These are USER-ONLY commands for starting development services

.PHONY: help dev stop status logs tail-logs health monitor clean

# Default target
help:
	@echo "Available targets:"
	@echo "  dev          - Start all services with shoreman (USER ONLY)"
	@echo "  stop         - Stop all development services (USER ONLY)"
	@echo "  status       - Show service status"
	@echo "  logs         - Show aggregated logs"
	@echo "  tail-logs    - Follow logs in real-time"
	@echo "  health       - Check service health"
	@echo "  monitor      - Show system monitoring dashboard"
	@echo "  clean        - Clean logs and temporary files"
	@echo ""
	@echo "Component-specific targets:"

	@echo "  frontend-status  - Check FRONTEND status"
	@echo "  frontend-logs    - Show FRONTEND logs"
	@echo "  backend-status  - Check BACKEND status"
	@echo "  backend-logs    - Show BACKEND logs"

# USER-ONLY COMMANDS - Claude should never execute these
dev:
	@echo "Starting development services with shoreman..."
	@echo "Clearing previous logs..."
	@rm -f ./dev.log
	@touch ./dev.log
	@if command -v shoreman >/dev/null 2>&1; then \
		shoreman Procfile; \
	elif command -v foreman >/dev/null 2>&1; then \
		foreman start; \
	else \
		echo "ERROR: Neither shoreman nor foreman found."; \
		echo "Run: gem install shoreman"; \
		exit 1; \
	fi


stop:
	@echo "Stopping development services..."
	@pkill -f 'node' 2>/dev/null || true
	@echo "Services stopped."


# CLAUDE-ACCESSIBLE COMMANDS - Safe for AI to execute
status:
	@echo "=== Service Status ==="

	@if curl -sf http://localhost:3000 >/dev/null 2>&1; then \
		echo "FRONTEND: ✓ Running (port 3000)"; \
	else \
		echo "FRONTEND: ✗ Not responding (port 3000)"; \
	fi
	@if pgrep -f "backend" >/dev/null 2>&1; then \
		echo "BACKEND: ✓ Process running"; \
	else \
		echo "BACKEND: ✗ Process not found"; \
	fi

frontend-status:
	@echo "=== FRONTEND Status ==="
	@if curl -sf http://localhost:3000 >/dev/null 2>&1; then \
		echo "FRONTEND: ✓ Running (port 3000)"; \
	else \
		echo "FRONTEND: ✗ Not responding (port 3000)"; \
	fi

backend-status:
	@echo "=== BACKEND Status ==="
	@if pgrep -f "backend" >/dev/null 2>&1; then \
		echo "BACKEND: ✓ Process running"; \
	else \
		echo "BACKEND: ✗ Process not found"; \
	fi


logs:
	@echo "=== Recent Logs ==="
	@if [ -f "./dev.log" ]; then tail -100 ./dev.log; else echo "No ./dev.log found"; fi

tail-logs:
	@echo "=== Following Logs (Ctrl+C to exit) ==="
	@if [ -f "./dev.log" ]; then tail -f ./dev.log; else echo "No ./dev.log found. Start services first."; fi

frontend-logs:
	@echo "=== FRONTEND Logs ==="
	@if [ -f "./dev.log" ]; then grep "\[FRONTEND\]" ./dev.log | tail -50; else echo "No ./dev.log found"; fi

backend-logs:
	@echo "=== BACKEND Logs ==="
	@if [ -f "./dev.log" ]; then grep "\[BACKEND\]" ./dev.log | tail -50; else echo "No ./dev.log found"; fi


health:
	@echo "=== Health Check ==="

	@curl -sf http://localhost:3000/health 2>/dev/null && \
		echo "FRONTEND: ✓ Healthy" || \
		echo "FRONTEND: ✗ Unhealthy"

frontend-health:
	@echo "=== FRONTEND Health ==="
	@curl -sf http://localhost:3000/health 2>/dev/null && \
		echo "FRONTEND: ✓ Healthy" || \
		echo "FRONTEND: ✗ Unhealthy"


monitor:
	@echo "=== System Monitor ==="
	@echo "Memory Usage:"
	@free -h 2>/dev/null || vm_stat | head -5
	@echo "Disk Usage:"
	@df -h . | tail -1
	@echo "Active Processes:"
	@ps aux | head -1
	@ps aux | grep -E "(node|python|go|cargo)" | grep -v grep | head -10 || echo "No monitored processes found"

clean:
	@echo "Cleaning logs and temporary files..."
	@rm -f ./dev.log *.pid
	@echo "Clean complete"
