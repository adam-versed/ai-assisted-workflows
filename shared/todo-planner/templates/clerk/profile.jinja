// {{ file.path }} - Clerk User Profile Management Component
// Generated from PRD requirements
{% if file.options.custom_fields %}
// ADVICE: Use metadata fields for custom user information that extends Clerk's base user object
{% endif %}
{% if file.options.image_upload %}
// ADVICE: Implement image upload with proper validation and Clerk's setProfileImage method
{% endif %}
{% if file.options.password_change %}
// ADVICE: Use Clerk's updatePassword method with proper validation and error handling
{% endif %}

import React, { useState } from 'react';
{% if file.options.nextjs %}
import { useUser } from '@clerk/nextjs';
{% else %}
import { useUser } from '@clerk/clerk-react';
{% endif %}
{% if file.options.image_upload %}
import { toast } from 'react-hot-toast'; // or your preferred toast library
{% endif %}

// User profile data interface
interface UserProfile {
  firstName: string;
  lastName: string;
  username: string;
  {% if file.options.custom_fields %}
  // Custom metadata fields
  bio?: string;
  company?: string;
  website?: string;
  location?: string;
  phoneNumber?: string;
  dateOfBirth?: string;
  {% endif %}
}

// Update profile payload
interface ProfileUpdatePayload {
  firstName?: string;
  lastName?: string;
  username?: string;
  {% if file.options.custom_fields %}
  unsafeMetadata?: Record<string, any>;
  {% endif %}
}

// Form validation errors
interface ValidationErrors {
  firstName?: string;
  lastName?: string;
  username?: string;
  {% if file.options.custom_fields %}
  bio?: string;
  website?: string;
  phoneNumber?: string;
  {% endif %}
  {% if file.options.password_change %}
  currentPassword?: string;
  newPassword?: string;
  confirmPassword?: string;
  {% endif %}
}

interface Props {
  className?: string;
  onProfileUpdate?: (user: any) => void;
  onError?: (error: Error) => void;
}

{% for function in functions %}
{% if function.name == 'default' or 'profile' in function.name.lower() %}
export default function {{ function.name.replace('default', file.path.split('/')[-1].replace('.tsx', '').replace('.jsx', '')) }}({
  className = '',
  onProfileUpdate,
  onError
}: Props) {
  // TODO: {{ function.prd_references | join(', ') }} - {{ function.description }}

  const { isLoaded, user } = useUser();

  // Form state
  const [profileData, setProfileData] = useState<UserProfile>({
    firstName: '',
    lastName: '',
    username: '',
    {% if file.options.custom_fields %}
    bio: '',
    company: '',
    website: '',
    location: '',
    phoneNumber: '',
    dateOfBirth: '',
    {% endif %}
  });

  const [isUpdating, setIsUpdating] = useState(false);
  const [errors, setErrors] = useState<ValidationErrors>({});
  const [activeTab, setActiveTab] = useState<'profile' | {% if file.options.password_change %}'security' | {% endif %}'preferences'>('profile');

  {% if file.options.password_change %}
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });
  const [isUpdatingPassword, setIsUpdatingPassword] = useState(false);
  {% endif %}

  // Initialize form data from user
  React.useEffect(() => {
    if (user) {
      setProfileData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        username: user.username || '',
        {% if file.options.custom_fields %}
        bio: (user.unsafeMetadata?.bio as string) || '',
        company: (user.unsafeMetadata?.company as string) || '',
        website: (user.unsafeMetadata?.website as string) || '',
        location: (user.unsafeMetadata?.location as string) || '',
        phoneNumber: (user.unsafeMetadata?.phoneNumber as string) || '',
        dateOfBirth: (user.unsafeMetadata?.dateOfBirth as string) || '',
        {% endif %}
      });
    }
  }, [user]);

  // Validation functions
  const validateProfile = (data: UserProfile): ValidationErrors => {
    const newErrors: ValidationErrors = {};

    if (!data.firstName.trim()) {
      newErrors.firstName = 'First name is required';
    }

    if (!data.lastName.trim()) {
      newErrors.lastName = 'Last name is required';
    }

    if (data.username && data.username.length < 3) {
      newErrors.username = 'Username must be at least 3 characters';
    }

    {% if file.options.custom_fields %}
    if (data.website && !isValidUrl(data.website)) {
      newErrors.website = 'Please enter a valid URL';
    }

    if (data.phoneNumber && !isValidPhoneNumber(data.phoneNumber)) {
      newErrors.phoneNumber = 'Please enter a valid phone number';
    }

    if (data.bio && data.bio.length > 500) {
      newErrors.bio = 'Bio must be less than 500 characters';
    }
    {% endif %}

    return newErrors;
  };

  {% if file.options.password_change %}
  const validatePassword = (data: typeof passwordData): ValidationErrors => {
    const newErrors: ValidationErrors = {};

    if (!data.currentPassword) {
      newErrors.currentPassword = 'Current password is required';
    }

    if (!data.newPassword) {
      newErrors.newPassword = 'New password is required';
    } else if (data.newPassword.length < 8) {
      newErrors.newPassword = 'Password must be at least 8 characters';
    }

    if (data.newPassword !== data.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }

    return newErrors;
  };
  {% endif %}

  // Handle profile update
  const handleProfileUpdate = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!user) return;

    const validationErrors = validateProfile(profileData);
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    setIsUpdating(true);
    setErrors({});

    try {
      const updatePayload: ProfileUpdatePayload = {
        firstName: profileData.firstName,
        lastName: profileData.lastName,
        username: profileData.username || undefined,
        {% if file.options.custom_fields %}
        unsafeMetadata: {
          ...user.unsafeMetadata,
          bio: profileData.bio,
          company: profileData.company,
          website: profileData.website,
          location: profileData.location,
          phoneNumber: profileData.phoneNumber,
          dateOfBirth: profileData.dateOfBirth,
        },
        {% endif %}
      };

      const updatedUser = await user.update(updatePayload);

      {% if file.options.image_upload %}
      toast.success('Profile updated successfully!');
      {% endif %}

      onProfileUpdate?.(updatedUser);

    } catch (error) {
      console.error('Profile update error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to update profile';

      {% if file.options.image_upload %}
      toast.error(errorMessage);
      {% endif %}

      onError?.(error instanceof Error ? error : new Error(errorMessage));

      setErrors({ firstName: errorMessage });
    } finally {
      setIsUpdating(false);
    }
  };

  {% if file.options.password_change %}
  // Handle password change
  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!user) return;

    const validationErrors = validatePassword(passwordData);
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    setIsUpdatingPassword(true);
    setErrors({});

    try {
      await user.updatePassword({
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword,
      });

      {% if file.options.image_upload %}
      toast.success('Password updated successfully!');
      {% endif %}

      // Clear password form
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
      });

    } catch (error) {
      console.error('Password update error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to update password';

      {% if file.options.image_upload %}
      toast.error(errorMessage);
      {% endif %}

      setErrors({ currentPassword: errorMessage });
    } finally {
      setIsUpdatingPassword(false);
    }
  };
  {% endif %}

  {% if file.options.image_upload %}
  // Handle profile image upload
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file || !user) return;

    // Validate file
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      toast.error('File size must be less than 5MB');
      return;
    }

    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      toast.error('Only JPEG, PNG, and WebP images are allowed');
      return;
    }

    try {
      await user.setProfileImage({ file });
      toast.success('Profile image updated successfully!');
    } catch (error) {
      console.error('Image upload error:', error);
      toast.error('Failed to update profile image');
    }
  };
  {% endif %}

  // Loading state
  if (!isLoaded) {
    return (
      <div className={`profile-loading ${className}`}>
        <div className="loading-container">
          <div className="loading-spinner" />
          <p>Loading profile...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className={`profile-error ${className}`}>
        <h2>Profile Not Available</h2>
        <p>Unable to load user profile.</p>
      </div>
    );
  }

  return (
    <div className={`profile-container ${className}`}>
      {/* Profile Header */}
      <div className="profile-header">
        <div className="profile-avatar">
          {% if file.options.image_upload %}
          <div className="avatar-container">
            <img
              src={user.imageUrl}
              alt={user.fullName || 'Profile'}
              className="avatar-image"
            />
            <label className="avatar-upload-overlay">
              <input
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="avatar-input"
              />
              <span className="upload-icon">📷</span>
            </label>
          </div>
          {% else %}
          <img
            src={user.imageUrl}
            alt={user.fullName || 'Profile'}
            className="avatar-image"
          />
          {% endif %}
        </div>

        <div className="profile-info">
          <h1 className="profile-name">{user.fullName}</h1>
          <p className="profile-email">{user.primaryEmailAddress?.emailAddress}</p>
          <p className="profile-joined">
            Member since {new Date(user.createdAt).toLocaleDateString()}
          </p>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="profile-tabs">
        <button
          className={`tab ${activeTab === 'profile' ? 'active' : ''}`}
          onClick={() => setActiveTab('profile')}
        >
          Profile
        </button>
        {% if file.options.password_change %}
        <button
          className={`tab ${activeTab === 'security' ? 'active' : ''}`}
          onClick={() => setActiveTab('security')}
        >
          Security
        </button>
        {% endif %}
        <button
          className={`tab ${activeTab === 'preferences' ? 'active' : ''}`}
          onClick={() => setActiveTab('preferences')}
        >
          Preferences
        </button>
      </div>

      {/* Tab Content */}
      <div className="profile-content">
        {/* Profile Tab */}
        {activeTab === 'profile' && (
          <form onSubmit={handleProfileUpdate} className="profile-form">
            <div className="form-section">
              <h2>Personal Information</h2>

              <div className="form-row">
                <div className="form-field">
                  <label htmlFor="firstName" className="field-label">
                    First Name *
                  </label>
                  <input
                    type="text"
                    id="firstName"
                    value={profileData.firstName}
                    onChange={(e) => setProfileData(prev => ({
                      ...prev,
                      firstName: e.target.value
                    }))}
                    className={`field-input ${errors.firstName ? 'error' : ''}`}
                    required
                  />
                  {errors.firstName && (
                    <span className="field-error">{errors.firstName}</span>
                  )}
                </div>

                <div className="form-field">
                  <label htmlFor="lastName" className="field-label">
                    Last Name *
                  </label>
                  <input
                    type="text"
                    id="lastName"
                    value={profileData.lastName}
                    onChange={(e) => setProfileData(prev => ({
                      ...prev,
                      lastName: e.target.value
                    }))}
                    className={`field-input ${errors.lastName ? 'error' : ''}`}
                    required
                  />
                  {errors.lastName && (
                    <span className="field-error">{errors.lastName}</span>
                  )}
                </div>
              </div>

              <div className="form-field">
                <label htmlFor="username" className="field-label">
                  Username
                </label>
                <input
                  type="text"
                  id="username"
                  value={profileData.username}
                  onChange={(e) => setProfileData(prev => ({
                    ...prev,
                    username: e.target.value
                  }))}
                  className={`field-input ${errors.username ? 'error' : ''}`}
                  placeholder="Choose a unique username"
                />
                {errors.username && (
                  <span className="field-error">{errors.username}</span>
                )}
              </div>

              {% if file.options.custom_fields %}
              <div className="form-field">
                <label htmlFor="bio" className="field-label">
                  Bio
                </label>
                <textarea
                  id="bio"
                  value={profileData.bio}
                  onChange={(e) => setProfileData(prev => ({
                    ...prev,
                    bio: e.target.value
                  }))}
                  className={`field-textarea ${errors.bio ? 'error' : ''}`}
                  placeholder="Tell us about yourself..."
                  rows={4}
                  maxLength={500}
                />
                <div className="field-meta">
                  <span className="char-count">{profileData.bio?.length || 0}/500</span>
                </div>
                {errors.bio && (
                  <span className="field-error">{errors.bio}</span>
                )}
              </div>

              <div className="form-row">
                <div className="form-field">
                  <label htmlFor="company" className="field-label">
                    Company
                  </label>
                  <input
                    type="text"
                    id="company"
                    value={profileData.company}
                    onChange={(e) => setProfileData(prev => ({
                      ...prev,
                      company: e.target.value
                    }))}
                    className="field-input"
                    placeholder="Your company"
                  />
                </div>

                <div className="form-field">
                  <label htmlFor="location" className="field-label">
                    Location
                  </label>
                  <input
                    type="text"
                    id="location"
                    value={profileData.location}
                    onChange={(e) => setProfileData(prev => ({
                      ...prev,
                      location: e.target.value
                    }))}
                    className="field-input"
                    placeholder="City, Country"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-field">
                  <label htmlFor="website" className="field-label">
                    Website
                  </label>
                  <input
                    type="url"
                    id="website"
                    value={profileData.website}
                    onChange={(e) => setProfileData(prev => ({
                      ...prev,
                      website: e.target.value
                    }))}
                    className={`field-input ${errors.website ? 'error' : ''}`}
                    placeholder="https://yourwebsite.com"
                  />
                  {errors.website && (
                    <span className="field-error">{errors.website}</span>
                  )}
                </div>

                <div className="form-field">
                  <label htmlFor="phoneNumber" className="field-label">
                    Phone Number
                  </label>
                  <input
                    type="tel"
                    id="phoneNumber"
                    value={profileData.phoneNumber}
                    onChange={(e) => setProfileData(prev => ({
                      ...prev,
                      phoneNumber: e.target.value
                    }))}
                    className={`field-input ${errors.phoneNumber ? 'error' : ''}`}
                    placeholder="+1 (555) 123-4567"
                  />
                  {errors.phoneNumber && (
                    <span className="field-error">{errors.phoneNumber}</span>
                  )}
                </div>
              </div>
              {% endif %}
            </div>

            <div className="form-actions">
              <button
                type="submit"
                disabled={isUpdating}
                className="update-button primary"
              >
                {isUpdating ? 'Updating...' : 'Update Profile'}
              </button>
            </div>
          </form>
        )}

        {% if file.options.password_change %}
        {/* Security Tab */}
        {activeTab === 'security' && (
          <form onSubmit={handlePasswordChange} className="security-form">
            <div className="form-section">
              <h2>Change Password</h2>

              <div className="form-field">
                <label htmlFor="currentPassword" className="field-label">
                  Current Password *
                </label>
                <input
                  type="password"
                  id="currentPassword"
                  value={passwordData.currentPassword}
                  onChange={(e) => setPasswordData(prev => ({
                    ...prev,
                    currentPassword: e.target.value
                  }))}
                  className={`field-input ${errors.currentPassword ? 'error' : ''}`}
                  required
                />
                {errors.currentPassword && (
                  <span className="field-error">{errors.currentPassword}</span>
                )}
              </div>

              <div className="form-field">
                <label htmlFor="newPassword" className="field-label">
                  New Password *
                </label>
                <input
                  type="password"
                  id="newPassword"
                  value={passwordData.newPassword}
                  onChange={(e) => setPasswordData(prev => ({
                    ...prev,
                    newPassword: e.target.value
                  }))}
                  className={`field-input ${errors.newPassword ? 'error' : ''}`}
                  required
                  minLength={8}
                />
                {errors.newPassword && (
                  <span className="field-error">{errors.newPassword}</span>
                )}
              </div>

              <div className="form-field">
                <label htmlFor="confirmPassword" className="field-label">
                  Confirm New Password *
                </label>
                <input
                  type="password"
                  id="confirmPassword"
                  value={passwordData.confirmPassword}
                  onChange={(e) => setPasswordData(prev => ({
                    ...prev,
                    confirmPassword: e.target.value
                  }))}
                  className={`field-input ${errors.confirmPassword ? 'error' : ''}`}
                  required
                />
                {errors.confirmPassword && (
                  <span className="field-error">{errors.confirmPassword}</span>
                )}
              </div>
            </div>

            <div className="form-actions">
              <button
                type="submit"
                disabled={isUpdatingPassword}
                className="update-button primary"
              >
                {isUpdatingPassword ? 'Updating...' : 'Update Password'}
              </button>
            </div>
          </form>
        )}
        {% endif %}

        {/* Preferences Tab */}
        {activeTab === 'preferences' && (
          <div className="preferences-form">
            <div className="form-section">
              <h2>Account Preferences</h2>
              <p>Additional preferences can be implemented here based on your application needs.</p>

              {/* Example preference */}
              <div className="form-field">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    className="field-checkbox"
                  />
                  Receive email notifications
                </label>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

{% else %}
{{ function.stub_code }}

{% endif %}
{% endfor %}

// Utility functions
{% if file.options.custom_fields %}
function isValidUrl(string: string): boolean {
  try {
    new URL(string);
    return true;
  } catch {
    return false;
  }
}

function isValidPhoneNumber(phone: string): boolean {
  const phoneRegex = /^\+?[\d\s\-\(\)]{10,}$/;
  return phoneRegex.test(phone);
}
{% endif %}

// Custom hooks
export function useProfileValidation() {
  const validateField = (field: string, value: string, type: 'email' | 'url' | 'phone' | 'text' = 'text') => {
    switch (type) {
      case 'email':
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value) || 'Invalid email format';
      case 'url':
        return isValidUrl(value) || 'Invalid URL format';
      case 'phone':
        return isValidPhoneNumber(value) || 'Invalid phone number format';
      default:
        return value.trim().length > 0 || `${field} is required`;
    }
  };

  return { validateField };
}

// TypeScript types
export interface ProfileComponentProps extends Props {}
export type { UserProfile, ProfileUpdatePayload, ValidationErrors };
