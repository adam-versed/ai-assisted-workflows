// {{ file.path }} - PostHog Provider Component
// Generated from PRD requirements
{% if file.options.nextjs %}
// ADVICE: Use this provider in your Next.js _app.tsx or layout.tsx
{% endif %}
{% if file.options.react %}
// ADVICE: Wrap your React app with this provider for PostHog context
{% endif %}

'use client';

import { createContext, useContext, useEffect, ReactNode } from 'react';
import posthog from 'posthog-js';
import { PostHogProvider as PostHogReactProvider } from 'posthog-js/react';

interface PostHogContextValue {
  posthog: typeof posthog;
  isLoaded: boolean;
}

const PostHogContext = createContext<PostHogContextValue | null>(null);

interface PostHogProviderProps {
  children: ReactNode;
  apiKey?: string;
  options?: {
    api_host?: string;
    ui_host?: string;
    {% if file.options.privacy %}
    person_profiles?: 'always' | 'never' | 'identified_only';
    {% endif %}
    {% if file.options.session_recording %}
    session_recording?: {
      maskAllInputs?: boolean;
      maskInputOptions?: Record<string, boolean>;
    };
    {% endif %}
  };
}

{% for function in functions %}
{% if 'provider' in function.name.lower() %}
// TODO: {{ function.prd_references | join(', ') }} - {{ function.description }}
export function {{ function.name }}({
  children,
  apiKey,
  options = {}
}: PostHogProviderProps) {
  useEffect(() => {
    const key = apiKey || process.env.NEXT_PUBLIC_POSTHOG_KEY;

    if (!key) {
      console.warn('PostHog API key not provided');
      return;
    }

    if (typeof window !== 'undefined' && !posthog.__loaded) {
      posthog.init(key, {
        api_host: options.api_host || process.env.NEXT_PUBLIC_POSTHOG_HOST || 'https://us.i.posthog.com',
        ui_host: options.ui_host || process.env.NEXT_PUBLIC_POSTHOG_UI_HOST || 'https://us.posthog.com',
        capture_pageview: false, // Handle manually
        capture_pageleave: true,
        persistence: 'localStorage+cookie',
        {% if file.options.session_recording %}
        session_recording: {
          maskAllInputs: {% if file.options.privacy %}true{% else %}false{% endif %},
          maskInputOptions: {
            password: true,
            email: {% if file.options.privacy %}true{% else %}false{% endif %},
            ...options.session_recording?.maskInputOptions,
          },
          ...options.session_recording,
        },
        {% endif %}
        {% if file.options.privacy %}
        person_profiles: options.person_profiles || 'identified_only',
        {% endif %}
        // Disable debug in production
        debug: process.env.NODE_ENV === 'development',
      });
    }
  }, [apiKey, options]);

  if (typeof window === 'undefined') {
    return <>{children}</>;
  }

  return (
    <PostHogReactProvider client={posthog}>
      <PostHogContext.Provider
        value={{
          posthog,
          isLoaded: posthog.__loaded || false
        }}
      >
        {children}
      </PostHogContext.Provider>
    </PostHogReactProvider>
  );
}

{% else %}
{{ function.stub_code }}

{% endif %}
{% endfor %}

// Custom hook to use PostHog
export function usePostHog() {
  const context = useContext(PostHogContext);

  if (!context) {
    throw new Error('usePostHog must be used within a PostHogProvider');
  }

  return context;
}

// Convenience hooks
export function useAnalytics() {
  const { posthog, isLoaded } = usePostHog();

  const track = (eventName: string, properties?: Record<string, any>) => {
    if (isLoaded) {
      {% if file.options.privacy %}
      const sanitizedProperties = sanitizeProperties(properties || {});
      posthog.capture(eventName, sanitizedProperties);
      {% else %}
      posthog.capture(eventName, properties);
      {% endif %}
    }
  };

  const identify = (userId: string, properties?: Record<string, any>) => {
    if (isLoaded) {
      {% if file.options.privacy %}
      const hashedUserId = hashUserId(userId);
      const sanitizedProperties = sanitizeUserProperties(properties || {});
      posthog.identify(hashedUserId, sanitizedProperties);
      {% else %}
      posthog.identify(userId, properties);
      {% endif %}
    }
  };

  const alias = (alias: string) => {
    if (isLoaded) {
      posthog.alias(alias);
    }
  };

  return {
    track,
    identify,
    alias,
    isLoaded,
    posthog: isLoaded ? posthog : null,
  };
}

{% if file.options.privacy %}
// Privacy utility functions
function sanitizeProperties(properties: Record<string, any>): Record<string, any> {
  const piiFields = ['email', 'phone', 'name', 'address', 'ssn', 'password'];
  const sanitized = { ...properties };

  piiFields.forEach(field => {
    if (field in sanitized) {
      delete sanitized[field];
    }
  });

  return sanitized;
}

function sanitizeUserProperties(properties: Record<string, any>): Record<string, any> {
  const allowedFields = ['plan', 'role', 'created_at', 'last_seen', 'subscription_tier'];
  const sanitized: Record<string, any> = {};

  allowedFields.forEach(field => {
    if (field in properties) {
      sanitized[field] = properties[field];
    }
  });

  return sanitized;
}

function hashUserId(userId: string): string {
  // Simple hash for user ID anonymization
  // TODO: Use proper crypto hash in production
  return btoa(userId).substr(0, 12);
}
{% endif %}

// TypeScript types
export interface AnalyticsEvent {
  name: string;
  properties?: Record<string, any>;
  timestamp?: string;
}

export interface AnalyticsUser {
  id: string;
  properties?: Record<string, any>;
}
