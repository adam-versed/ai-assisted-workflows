# {{ file.path }} - FastAPI Router
# Generated from PRD requirements
{% if file.options.validation %}
# ADVICE: Use Pydantic models for request/response validation
{% endif %}
{% if file.options.auth %}
# ADVICE: Implement JWT or OAuth2 authentication
{% endif %}
{% if file.options.docs %}
# ADVICE: Add comprehensive OpenAPI documentation
{% endif %}

from fastapi import APIRouter, HTTPException, Depends
{% if file.options.validation %}
from pydantic import BaseModel
{% endif %}
{% if file.options.auth %}
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
{% endif %}

router = APIRouter(
    prefix="/api",
    tags=["{{ file.module or 'api' }}"],
    {% if file.options.docs %}
    responses={404: {"description": "Not found"}},
    {% endif %}
)

{% if file.options.auth %}
security = HTTPBearer()

async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    # TODO: Implement authentication logic
    token = credentials.credentials
    # Validate token and return user
    return {"user_id": "example"}
{% endif %}

{% if file.options.validation %}
# Request/Response models
class CreateRequest(BaseModel):
    name: str
    description: str = None

class ItemResponse(BaseModel):
    id: int
    name: str
    description: str = None
{% endif %}

{% for function in functions %}
@router.{{ function.name.lower() if function.name.upper() in ['GET', 'POST', 'PUT', 'DELETE'] else 'get' }}("{{ function.path or '/items' }}")
async def {{ function.name.lower() if function.name.upper() not in ['GET', 'POST', 'PUT', 'DELETE'] else 'handle_' + function.name.lower() }}(
    {% if function.name.upper() in ['POST', 'PUT'] and file.options.validation %}
    request: CreateRequest,
    {% endif %}
    {% if file.options.auth %}
    current_user: dict = Depends(get_current_user)
    {% endif %}
):
    """
    {{ function.description or 'Handle ' + function.name + ' request' }}

    TODO: {{ function.prd_references | join(', ') }}
    """

    try:
        {% if file.options.validation and function.name.upper() in ['POST', 'PUT'] %}
        # Validate request data
        if not request.name:
            raise HTTPException(status_code=400, detail="Name is required")
        {% endif %}

        {% if file.options.auth %}
        # Check user permissions
        user_id = current_user["user_id"]
        {% endif %}

        # Main business logic
        result = await process_request({% if function.name.upper() in ['POST', 'PUT'] and file.options.validation %}request{% endif %}{% if file.options.auth %}{% if function.name.upper() in ['POST', 'PUT'] and file.options.validation %}, {% endif %}user_id{% endif %})

        return {% if file.options.validation %}ItemResponse(**result){% else %}result{% endif %}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

{% endfor %}

# Helper functions
async def process_request({% if file.options.validation %}request: CreateRequest = None{% endif %}{% if file.options.auth %}{% if file.options.validation %}, {% endif %}user_id: str = None{% endif %}):
    # TODO: Implement main business logic
    return {
        "id": 1,
        "name": {% if file.options.validation %}request.name if request else {% endif %}"example",
        "description": {% if file.options.validation %}request.description if request else {% endif %}"Generated item"
    }
